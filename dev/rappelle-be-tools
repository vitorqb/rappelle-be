#!/bin/python3

import argparse
import subprocess
import os
import json
import enum


# Globals
# (some day should be converted to configurable options)
DB_NAME = "rappelle-be"
TEST_DB_NAME = "rappelle-be-test"
POSTGRES_USER = "theuser"


# Helpers
class Contexts(enum.Enum):
    """ Helper enumeration for possible application running contexts """
    dev = 'dev'
    local = 'local'
    prod = 'prod'


class Runner():
    """ A configurable runner for commands """

    def __init__(self, cwd, docker_compose_cmd):
        self.cwd = cwd
        self.deploy_dir = f"{cwd}/deploy"
        self.docker_compose_cmd = docker_compose_cmd

    def run(self, args, cwd=None):
        cwd = cwd or self.cwd
        print(f"Running {args} in {cwd}")
        subprocess.run(args, cwd=cwd)

    def run_docker_compose(self, args):
        cmd = [
            *self.docker_compose_cmd,
            "-fdocker-compose.yaml",
            "-fdocker-compose.local.yaml",
            "-fdocker-compose.dev.yaml"
        ]
        self.run([*cmd, *args], self.deploy_dir)

    def run_sbt(self, args, context=Contexts.dev):
        cmd = ["sbt"]
        self.run([*cmd, *args], self.cwd)


# Commands
def scalafmt(r, args):
    r.run(['coursier', 'launch', 'scalafmt', '--', "--debug", './app', './test'])


def sbt(r, args):
    cmd = []
    if args.no_supershell:
        cmd += ['--supershell=false']
    r.run_sbt(cmd)


def test(r, args):
    context = ('FunTest' if args.functional else 'Test')
    subCmd = f"{context} / testOnly"
    if args.pattern and args.pattern != "":
        subCmd += f" {args.pattern}"
    r.run_sbt([subCmd], Contexts.local)


def postgres(r, args):
    r.run_docker_compose(['up', '--force-recreate', 'postgres'])


def postgres_shell(r, args):
    db = (TEST_DB_NAME if args.test else DB_NAME)
    r.run_docker_compose(['exec', 'postgres', 'psql', db, POSTGRES_USER])


# Arg parsing
parser = argparse.ArgumentParser(description="Development tools for rappelle-be")
parser.add_argument(
    "-D",
    "--directory",
    help="the directory with the github repo root",
    default=os.environ.get("RAPPELLE_BE_REPO_ROOT", "~/git/rappelle-be")
)
parser.add_argument(
    "--docker-compose-cmd",
    help="shell command to use to run docker-compose. Must be a valid json array.",
    default=os.environ.get("RAPPELLE_BE_DOCKER_COMPOSE_CMD", "[\"docker-compose\"]")
)
subparsers = parser.add_subparsers()

parser_scalafmt = subparsers.add_parser('scalafmt')
parser_scalafmt.set_defaults(func=scalafmt)

parser_sbt = subparsers.add_parser('sbt')
parser_sbt.set_defaults(func=sbt)
parser_sbt.add_argument("--no-supershell", dest="no_supershell", action="store_true")

parser_postgres = subparsers.add_parser('postgres')
parser_postgres.set_defaults(func=postgres)

parser_test = subparsers.add_parser('test')
parser_test.set_defaults(func=test)
parser_test.add_argument("-f", "--functional", dest="functional", action="store_true", help="Run functional tests instead")
parser_test.add_argument("-p", "--pattern", help="Test pattern to pass to sbt (e.g. **MyCoolSpec)")

parser_postgres_shell = subparsers.add_parser('postgres-shell')
parser_postgres_shell.set_defaults(func=postgres_shell)
parser_postgres_shell.add_argument("-t", "--test", help="Connect to test db instead.", action="store_true")


# Script
if __name__ == "__main__":
    args = parser.parse_args()
    docker_compose_cmd = json.loads(args.docker_compose_cmd)
    runner = Runner(cwd=args.directory, docker_compose_cmd=docker_compose_cmd)
    args.func(runner, args)
